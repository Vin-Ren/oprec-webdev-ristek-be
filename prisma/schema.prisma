// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// id using cuid for publicly exposed models
// else, use int as id, much lighter

enum UserRoles {
  Admin
  User
}

model User {
  id                  String               @id @default(cuid())
  username            String
  avatarUrl           String               @default("")
  passwordHash        String               @default("")
  githubId            Int?
  role                UserRoles            @default(User)
  sessions            Session? // Should be one-to-one
  tryouts             Tryout[]
  activeTryoutSession ActiveTryoutSession?
  submissions         Submission[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@unique([githubId])
}

model Session {
  id        String   @id @default(cuid())
  sid       String   @unique
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  expires   DateTime @default(now())
  data      String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime @default(now())

  @@unique([userId(sort: Asc)])
}

enum TryoutVisibility {
  PUBLIC
  UNLISTED
  PRIVATE
}

model Tryout {
  id                  String               @id @default(cuid())
  name                String
  description         String               @default("")
  questionsOrder      String? // Should exist if shuffled=false, will constrain this on backend
  shuffled            Boolean              @default(true)
  opensAt             DateTime             @default(now())
  closesAt            DateTime             @default(now())
  duration            Int                  @default(0)
  ownerId             String
  owner               User                 @relation(fields: [ownerId], references: [id])
  visibility          TryoutVisibility     @default(PRIVATE)
  passphrase          String               @default("")
  editable            Boolean              @default(false)
  questions           Question[]
  activeTryoutSession ActiveTryoutSession?
  submissions         Submission[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model ActiveTryoutSession {
  id       Int    @id @default(autoincrement())
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  tryoutId String
  tryout   Tryout @relation(fields: [tryoutId], references: [id])

  @@unique([userId])
  @@unique([tryoutId])
}

enum QuestionType {
  MULTIPLE_CHOICE // TRUE_FALSE_QUESTION is a subspace of MULTIPLE_CHOICE
  SHORT_QUESTION
  ESSAY
}

model Question {
  id        Int          @id @default(autoincrement())
  content   String
  weight    Float        @default(1) // Contribution to total score
  type      QuestionType
  tryoutId  String
  tryout    Tryout       @relation(fields: [tryoutId], references: [id])
  choices   Choice[] // Essay or Short questions doesn't have choices
  answer    Answer?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Choice {
  id              Int               @id @default(autoincrement())
  content         String
  questionId      Int
  question        Question          @relation(fields: [questionId], references: [id])
  answer          Answer?
  SubmittedAnswer SubmittedAnswer[]
}

model Answer {
  id         Int      @id @default(autoincrement())
  content    String? // Exists if the question type is not multiple choices
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
  choiceId   Int? // Only exists if the question is multiple choices
  choice     Choice?  @relation(fields: [choiceId], references: [id])

  @@unique([questionId(sort: Asc)])
  @@unique([choiceId])
}

model Submission {
  id               String            @id @default(cuid())
  questionsOrder   String?
  userId           String
  user             User              @relation(fields: [userId], references: [id])
  tryoutId         String
  tryout           Tryout            @relation(fields: [tryoutId], references: [id])
  startedAt        DateTime          @default(now())
  finishedAt       DateTime?
  finished         Boolean           @default(false)
  flags            Flag[]
  submittedAnswers SubmittedAnswer[]
}

model SubmittedAnswer {
  id            Int        @id @default(autoincrement())
  content       String?
  weight        Float      @default(0) // Contribution to total score
  choiceId      Int?
  choice        Choice?    @relation(fields: [choiceId], references: [id])
  submissionId  String
  submission    Submission @relation(fields: [submissionId], references: [id])
  questionIndex Int

  @@unique([submissionId, questionIndex])
}

model Flag {
  id            Int        @id @default(autoincrement())
  submissionId  String
  submission    Submission @relation(fields: [submissionId], references: [id])
  questionIndex Int

  @@unique([submissionId(sort: Asc), questionIndex])
}
